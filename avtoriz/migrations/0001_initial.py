# Generated by Django 4.2.6 on 2023-12-04 05:55

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountPoint',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('id_Ulges', models.CharField(max_length=255)),
                ('conclusion_date', models.CharField(max_length=255)),
                ('terminate_date', models.CharField(max_length=255, null=True)),
                ('comment', models.CharField(max_length=255, null=True)),
                ('name', models.CharField(max_length=255)),
                ('location', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Точка Учета',
                'verbose_name_plural': 'Точка Учета',
            },
        ),
        migrations.CreateModel(
            name='Agreement',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('id_Ulges', models.CharField(max_length=255)),
                ('number_agreement', models.CharField(max_length=255)),
                ('conclusion_date', models.CharField(max_length=255)),
                ('terminate_date', models.CharField(max_length=255)),
                ('type_agreement', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Договор',
                'verbose_name_plural': 'Договор',
            },
        ),
        migrations.CreateModel(
            name='ConfirmationData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('partner_id', models.IntegerField()),
                ('agreement_id', models.IntegerField()),
                ('objects_ids', models.JSONField()),
                ('point_ids', models.JSONField()),
                ('device_ids', models.JSONField()),
                ('transformator_ids', models.JSONField()),
                ('email', models.EmailField(max_length=254)),
                ('confirmation_code', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Данные для подтверждения',
                'verbose_name_plural': 'Данные для подтверждения',
            },
        ),
        migrations.CreateModel(
            name='DeviceAccount',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('id_Ulges', models.CharField(max_length=255)),
                ('model_id', models.CharField(max_length=255)),
                ('factory_number', models.CharField(max_length=255)),
                ('digit', models.CharField(max_length=30, null=True)),
                ('phase', models.CharField(max_length=100, null=True)),
                ('voltage', models.CharField(max_length=100, null=True)),
                ('gos_install_date', models.CharField(max_length=30, null=True)),
                ('production_date', models.CharField(max_length=255, null=True)),
                ('id_object_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='avtoriz.accountpoint')),
            ],
            options={
                'verbose_name': 'Прибор Учета',
                'verbose_name_plural': 'Прибор Учета',
            },
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('id_Ulges', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('type_partner', models.CharField(max_length=255)),
                ('inn', models.CharField(max_length=255)),
                ('kpp', models.CharField(max_length=255)),
                ('legal_address', models.CharField(max_length=255, null=True)),
                ('mail_address', models.CharField(max_length=255)),
                ('email', models.CharField(max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Контрагент',
                'verbose_name_plural': 'Контрагент',
            },
        ),
        migrations.CreateModel(
            name='UserActionLogger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100)),
                ('email', models.CharField(max_length=100, null=True)),
                ('action', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Журнал действий',
                'verbose_name_plural': 'Журнал действий',
            },
        ),
        migrations.CreateModel(
            name='UserAgreement',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('id_customUser', models.IntegerField()),
                ('id_agreement', models.IntegerField()),
                ('is_approved', models.BooleanField(default=False)),
                ('status', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Договор Пользователя',
                'verbose_name_plural': 'Договор Пользователя',
            },
        ),
        migrations.CreateModel(
            name='UserDeviceAccount',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('id_customUser', models.JSONField()),
                ('id_device', models.CharField(max_length=50)),
                ('status', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Прибор Учета Пользователя',
                'verbose_name_plural': 'Прибор Учета Пользователя',
            },
        ),
        migrations.CreateModel(
            name='UserObject',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('id_customUser', models.JSONField()),
                ('id_object', models.CharField(max_length=50)),
                ('status', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Объект пользователя',
                'verbose_name_plural': 'Объект пользователя',
            },
        ),
        migrations.CreateModel(
            name='UserPartner',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('id_customUser', models.IntegerField()),
                ('id_partner', models.IntegerField()),
                ('is_approved', models.BooleanField(default=False)),
                ('status', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'КонтрАгент Пользователя',
                'verbose_name_plural': 'КонтрАгент Пользователя',
            },
        ),
        migrations.CreateModel(
            name='UserPoint',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('id_customUser', models.JSONField()),
                ('id_point', models.CharField(max_length=50)),
                ('status', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Точки Учета Пользователя',
                'verbose_name_plural': 'Точки Учета Пользователя',
            },
        ),
        migrations.CreateModel(
            name='UserTransformator',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('id_customUser', models.JSONField()),
                ('id_transform', models.CharField(max_length=50)),
                ('status', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Дополнительное оборудование Пользователя',
                'verbose_name_plural': 'Дополнительное оборудование Пользователя',
            },
        ),
        migrations.CreateModel(
            name='TransformDevice',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('Trans', models.CharField(max_length=50)),
                ('TransPrimary', models.IntegerField()),
                ('TransSecondary', models.IntegerField()),
                ('TransType', models.CharField(max_length=100)),
                ('TransPrecision', models.FloatField()),
                ('TransInterval', models.IntegerField()),
                ('id_device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='avtoriz.deviceaccount')),
            ],
            options={
                'verbose_name': 'Трансформатор',
                'verbose_name_plural': 'Трансформатор',
            },
        ),
        migrations.CreateModel(
            name='ObjectAccount',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('id_Ulges', models.CharField(max_length=255)),
                ('address', models.CharField(max_length=255)),
                ('object_type', models.CharField(max_length=255)),
                ('agreement_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='avtoriz.agreement')),
            ],
            options={
                'verbose_name': 'Объект Учета',
                'verbose_name_plural': 'Объект Учета',
            },
        ),
        migrations.AddField(
            model_name='agreement',
            name='partner_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='avtoriz.partner'),
        ),
        migrations.AddField(
            model_name='accountpoint',
            name='id_object_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='avtoriz.objectaccount'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('password', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('confirmation', models.CharField(default=uuid.uuid4, max_length=255)),
                ('status', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
